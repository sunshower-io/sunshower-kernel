buildscript {
    apply from: 'gradle/buildscript.gradle', to: buildscript

    dependencies {
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.18"
    }
}
apply plugin: 'nebula-aggregate-javadocs'

allprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'net.ltgt.apt'
    apply plugin: 'maven-publish'
    apply plugin: "com.diffplug.gradle.spotless"
    apply plugin: 'project-report'
    apply plugin: 'io.spring.dependency-management'

    configurations {
        tests 
        plugin
        testPlugin
    }

    spotless {
        java {
            googleJavaFormat('1.5')
        }
    }

    task archiveTests(type: Jar) {
        classifier = 'tests'
        from sourceSets.test.output
    }

    artifacts {
        tests archiveTests
    }
//
//    clover {
//        report {
//            html = true
//        }
//
//        compiler {
//            debug = true
//            additionalArgs = '-parameters'
//        }
//    }


    def repos = [
            'http://artifacts.sunshower.io/repository/sunshower-releases',
            'http://artifacts.sunshower.io/repository/sunshower-snapshots',
            "http://oss.sonatype.org/content/repositories/snapshots",
            "http://www.gridgainsystems.com/nexus/content/repositories/external"
    ]




    task sourceJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }


    dependencies {
//        clover 'org.openclover:clover:4.2.0'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()


        ivy {
            url "http://download.jboss.org/wildfly"
            layout "pattern", {
                artifact "[revision]/[module]-[revision].[ext]"
            }
        }

        maven {
            url mavenRepositoryUrl

            credentials {
                username mavenRepositoryUsername
                password mavenRepositoryPassword
            }
        }
        repos.each { repo ->
            maven { url "$repo" }
        }
    }

    dependencyManagement {
        imports {
            mavenBom("io.sunshower.kernel:bom-imported:${version}") {
                bomProperties([
                        'env.version': '1.0.11.Final'
                ])
            }
        }
    }


    plugins.withType(JavaPlugin) {

        dependencies {
            annotationProcessor "org.projectlombok:lombok:1.18.2"
            compileOnly "org.projectlombok:lombok:1.18.2"
            testCompileOnly "org.projectlombok:lombok:1.18.2"
            compileOnly 'javax.ws.rs:javax.ws.rs-api'
            compileOnly 'org.eclipse.persistence:org.eclipse.persistence.moxy'
            compileOnly 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api'


            testCompile 'javax.mail:mail'
            testCompile('org.mockito:mockito-core')
            testCompile('org.junit.platform:junit-platform-launcher')
            testCompile('org.junit.platform:junit-platform-commons')
            testCompile('org.junit.jupiter:junit-jupiter-engine')
            testCompile('org.junit.vintage:junit-vintage-engine')
            testCompile('org.junit.platform:junit-platform-runner')
        }
    }


//    publishing {
//        repositories {
//            maven {
//                url mavenRepositoryUrl
//
//                credentials {
//                    username mavenRepositoryUsername
//                    password mavenRepositoryPassword
//                }
//            }
//        }
//
//        publications {
//            maven(MavenPublication) {
//                from components.java
//
//                artifact sourceJar {
//                    classifier "sources"
//                }
//            }
//        }
//    }


}




publishing {
    repositories {
        maven {
            url mavenRepositoryUrl

            credentials {
                username mavenRepositoryUsername
                password mavenRepositoryPassword
            }
        }
    }

//    publications {
//        maven(MavenPublication) {
//            artifact archiveReports {
//                classifier 'reports'
//            }
//        }
//    }
}

//task archiveReports(type: Zip) {
//    from "$buildDir/docs"
//    include "/**/*"
//
//    from "$buildDir/reports/clover"
//
//    archiveName 'reports.zip'
//}


//assemble.dependsOn cloverAggregateReports
assemble.dependsOn 'aggregateJavadocs'

//assemble.dependsOn archiveReports
//archiveReports.mustRunAfter cloverAggregateReports
//archiveReports.mustRunAfter 'aggregateJavadocs'

//add to default tasks'cloverAggregateReports', 

defaultTasks 'clean', 'build', 'aggregateJavadocs', 'pTML'
