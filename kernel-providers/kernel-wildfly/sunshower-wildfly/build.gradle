import static com.github.zhurlik.Ver.V_1_3


buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'http://repo.spring.io/snapshot' }
        maven { url 'http://plugins.gradle.org/m2/' }
    }

    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.4.RELEASE"
        classpath "gradle.plugin.com.github.zhurlik:gradle-jboss-modules:0.18"
    }
}


//apply plugin: 'war'
apply plugin: 'maven-publish'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.zhurlik.jbossmodules'
apply from: 'gradle/modules.gradle'
apply from: 'gradle/dependencies.gradle'



configurations {
    wildfly

    kernelModule
}

dependencies {

    /**
     * Wildfly core dependency
     */
    wildfly group: 'io.sunshower', name: 'wildfly', version: '11.0.0.Final', ext: 'zip'

    /**
     * Compile dependencies
     */
    compile project(":kernel-api")
    compile project(":kernel-core")
    compile project(":kernel-common")
    testCompileOnly 'javax.servlet:javax.servlet-api'


    compileOnly group: 'javax.ejb', name: 'javax.ejb-api', version: '3.2'
    compileOnly project(':kernel-providers:kernel-wildfly:kernel-wildfly-provider')

    /**
     * Test compile modules
     */
    testCompile 'io.sunshower.test:test-common'
    testCompile group: 'org.jboss.arquillian.junit', name: 'arquillian-junit-container'
    testCompile group: 'org.wildfly.arquillian', name: 'wildfly-arquillian-container-managed'
    testCompile project(':kernel-providers:kernel-wildfly:wildfly-test-plugins:simple-test')

    /**
     * Kernel modules
     */
    kernelModule project(path: ':kernel-providers:kernel-wildfly:kernel-wildfly-provider', configuration: 'war')
    kernelModule project(path: ':kernel-providers:kernel-wildfly:wildfly-test-plugins:simple-test', configuration: 'war')
    kernelModule project(path: ':kernel-providers:kernel-wildfly:wildfly-test-plugins:wildfly-system-tests', configuration: 'war')
}


task copyModules(type: Copy) {
    dependsOn configurations.kernelModule

    from configurations.kernelModule
    destinationDir = file("$project.buildDir/dist/wildfly-11.0.0.Final/standalone/deployments")
}

test.dependsOn copyModules
test.mustRunAfter copyModules

jbossrepos {
    'wildfly11.0.0' {
        version = V_1_3
    }
}


task distributionZip(type: Zip, dependsOn: 'assembleAll') {
    from("$project.buildDir/dist/wildfly-11.0.0.Final") {
        exclude "**/*test*.war"
        exclude "**/*.deployed"
        exclude "**/logging.properties"
    }
}

publishing {
    repositories {
        maven {
            url mavenRepositoryUrl

            credentials {
                username mavenRepositoryUsername
                password mavenRepositoryPassword
            }
        }
    }
    publications {
        distribution(MavenPublication) {
            groupId 'io.sunshower.wildfly'
            artifactId 'sunshower-wildfly'
            artifact distributionZip
        }
    }
}


task copyWildfly(type: Copy) {
    dependsOn configurations.wildfly
    configurations.wildfly.each {
        from(zipTree(it))
    }
    into file("${project.buildDir}/dist")

}



task overlayStandalone(type: Copy) {
    from fileTree("${project.projectDir}/src/main/resources")
    into file("${project.buildDir}/dist/wildfly-11.0.0.Final/standalone/configuration")
}

task overlay(type: Copy) {


    from fileTree("${project.buildDir}/install/wildfly11.0.0")
    into file("${project.buildDir}/dist/wildfly-11.0.0.Final")

    doLast {
        def slurper = new groovy.util.XmlSlurper(false, false)

        def f = file(
                "${project.buildDir}/dist/wildfly-11.0.0.Final/" +
                        "modules/system/layers/base/org/jboss/" +
                        "resteasy/resteasy-validator-provider-11/main/module.xml")

        def t = slurper.parseText(f.text)
        t.dependencies.appendNode({ module(name: 'org.eclipse.moxy') })


        def bound = new groovy.xml.StreamingMarkupBuilder().bind { mkp.yield t }
        def serialize = groovy.xml.XmlUtil.serialize(bound)
        f.write(serialize)


    }
}

//task cleanup(type: Delete) {
//    delete fileTree("$project.buildDir/dist/wildfly-11.0.0.Final/standalone/deployments/") {
//        include "**/*test*.war"
//        include "**/*.deployed"
//    }
//}


task createDistribution(type: Zip, dependsOn: ['copyWildfly', 'overlay', 'overlayStandalone']) {
    from "${project.buildDir}/dist/wildfly-11.0.0.Final"
    into "sunshower-wildfly"
}


task assembleAll(dependsOn: ['wildfly11.0.0DistZip', 'createDistribution', 'distZip']) {
    
}


makeModules.finalizedBy assembleAll


defaultTasks 'clean', 'copyWildfly', 'overlay', 'distZip'
